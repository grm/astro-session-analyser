# Astro Session Analyser - Ekos Edition
# Cline rules for development and maintenance

## Project Overview
This project is an astrophotography session analyzer specifically designed for Ekos/KStars. It parses `.analyze` files generated by Ekos and sends detailed summaries to Discord.

## Project Architecture
```
├── nightly_summary.py              # Main CLI entry point
├── ekos_analyzer.py                # Ekos .analyze file parser
├── ekos_discord_formatter.py       # Unified Discord formatter (all levels)
├── advanced_metrics.py             # Advanced statistical calculations
├── utils.py                        # Utilities (config, logging, Discord)
├── config.yml                      # User configuration
├── config_example.yml              # Unified configuration example
├── Pipfile / Pipfile.lock          # Python dependency management
└── README.md                       # Complete documentation
```

## Key Simplifications (Latest Update)
- **Single formatter**: `ekos_discord_formatter.py` handles all report levels
- **Single config**: `config_example.yml` supports all features from basic to detailed
- **3 levels only**: minimal, standard, detailed (removed expert/custom complexity)
- **Auto-activation**: detailed level automatically enables advanced analytics
- **Dry-run support**: `--dry-run` flag for safe development testing

## Technologies and Dependencies
- **Python 3.7+** with Pipenv for dependency management
- **File parsing**: Ekos/KStars `.analyze` files in CSV-like format
- **Discord API**: Webhooks for message sending
- **YAML**: Configuration and parameters
- **NumPy/SciPy**: Advanced statistical calculations on observation data
- **Scientific Libraries**: Optional for advanced analytics

## Development Rules

### 1. Code Structure
- **ekos_analyzer.py**: Contains business logic for parsing Ekos files
- **ekos_discord_formatter.py**: Unified Discord formatter (all levels)
- **advanced_metrics.py**: Statistical calculations and data analysis
- **utils.py**: Generic utility functions (config, logging, network)
- **nightly_summary.py**: CLI interface, argument handling and orchestration

### 2. Ekos Data Handling
- `.analyze` files are in CSV format with timestamped events
- Main event types: `CaptureComplete`, `CaptureAborted`, `AutofocusComplete`, `Temperature`
- **IMPORTANT**: Always handle cases where data may be missing or malformed
- Use `logging.debug()` for non-critical parsing errors

### 3. Discord Formatting
- Use emojis to improve readability (🔭, 📸, 🌡️, ⭐, etc.)
- Respect Discord's 2000 character limit per message
- Format durations in readable format (1h 49m, 2d 3h)
- Round temperatures to 1 decimal place, HFR to 2 decimal places
- Support 3 report levels: minimal, standard, detailed

### 4. Configuration Management
- Always validate presence of mandatory parameters (webhook)
- Provide sensible defaults (24h for `hours`, ~/.local/share/kstars/analyze for `analyze_dir`)
- Log configuration errors clearly
- Support both basic and advanced configuration schemas
- Graceful degradation when advanced features unavailable

### 5. Error Handling
- Use `logging` for all errors and debug messages
- Never crash the program for minor parsing errors
- Provide user-friendly error messages in console output
- Handle missing dependencies gracefully with informative messages

### 6. Testing and Validation
- Test with real Ekos `.analyze` files
- Validate Discord format before sending
- Verify statistical calculation consistency (min/max/avg)
- Test all report levels and configuration combinations

## Code Conventions

### Python Style
- Follow PEP 8 for code style
- Use docstrings for all public functions
- Type hints recommended for new functions
- Explicit variable names (`capture_data` rather than `cd`)
- All comments and documentation in English

### Logging Standards
```python
# Use appropriate levels
logging.debug("Parsing details for developers")
logging.info("Important information for users")  
logging.warning("Non-critical issues")
logging.error("Errors that prevent functioning")
```

### Timestamp Handling
- Ekos timestamps are Unix seconds since session start
- Always validate datetime format before parsing
- Handle timezones (UTC by default)

### Advanced Analytics
- Implement statistical calculations with proper error handling
- Use numpy/scipy for complex calculations when available
- Provide fallback methods when scientific libraries unavailable
- Calculate correlations with statistical significance testing

## Development Workflow

### Before Making Changes
1. Read README.md to understand context
2. Examine example files in `config_example.yml` 
3. Understand Ekos `.analyze` file format
4. Check if changes affect basic vs advanced functionality

### Local Testing (IMPORTANT: Always use --dry-run during development)
```bash
# Install dependencies
pipenv install

# Install advanced dependencies (for detailed level)
pipenv install numpy scipy

# Test with dry-run (REQUIRED during development)
pipenv run python nightly_summary.py -c config.yml --dry-run

# Test with verbose debug output
pipenv run python nightly_summary.py -c config.yml --dry-run --verbose

# Test different report levels
# minimal level
echo 'discord_report_level: "minimal"' >> config_test.yml
pipenv run python nightly_summary.py -c config_test.yml --dry-run

# standard level  
echo 'discord_report_level: "standard"' >> config_test.yml
pipenv run python nightly_summary.py -c config_test.yml --dry-run

# detailed level (with advanced analytics)
echo 'discord_report_level: "detailed"' >> config_test.yml
pipenv run python nightly_summary.py -c config_test.yml --dry-run

# ONLY send to Discord after testing
pipenv run python nightly_summary.py -c config.yml
```

### Recommended Modifications
- **New Statistics**: Add to `advanced_metrics.py` then format in appropriate formatter
- **New Output Formats**: Create new formatter (e.g., `ekos_email_formatter.py`)
- **New Ekos Event Support**: Extend `parse_analyze_file()` method
- **New Report Levels**: Extend formatter classes with new methods

## Special Considerations

### Sensitive Data
- Discord webhooks are sensitive, never log them
- File paths may contain personal information
- Statistical data should be anonymized for sharing

### Performance
- `.analyze` files can be large (long sessions)
- Use generators for large datasets when necessary
- Optimize regex for filename parsing
- Cache statistical calculations when appropriate

### Ekos Compatibility
- `.analyze` file format may evolve with Ekos versions
- Always test with current Ekos/KStars version
- Maintain backward compatibility when possible
- Document format changes and version compatibility

### Advanced Features
- Scientific libraries (numpy/scipy) are optional dependencies
- Implement graceful degradation when advanced libraries unavailable
- Provide clear user feedback about available vs requested features
- Maintain full functionality in basic mode

## Useful Commands
```bash
# Development
pipenv shell                    # Activate virtual environment
pipenv install --dev           # Install dev dependencies
pipenv run python nightly_summary.py -c config.yml -v  # Verbose test

# Advanced testing
cp config_advanced_example.yml config_test.yml
# Edit webhook in config_test.yml
pipenv run python nightly_summary.py -c config_test.yml -v

# Maintenance
pipenv update                  # Update dependencies
pipenv check                   # Check for vulnerabilities
```

## External Resources
- [Ekos Documentation](https://docs.kde.org/trunk5/en/kstars/kstars/ekos.html)
- [Discord Webhooks API](https://discord.com/developers/docs/resources/webhook)
- [KStars File Formats](https://invent.kde.org/education/kstars)
- [NumPy Documentation](https://numpy.org/doc/)
- [SciPy Documentation](https://docs.scipy.org/)

## Report Levels Guide

### MINIMAL
- Ultra-quick notifications (3 lines max)
- Critical alerts only
- Perfect for automated monitoring
- No scientific calculations required

### STANDARD  
- Current format enhanced
- Balance between information and readability
- Compatible with existing usage
- Basic statistics included

### DETAILED
- Comprehensive analysis for enthusiasts
- Quality trends and correlations
- Performance metrics included
- Temporal pattern analysis

### EXPERT
- Full statistical analysis for data lovers
- All correlation calculations
- Scientific metrics with significance testing
- Equipment performance analysis
- Automated recommendations

### CUSTOM
- User-selectable sections
- Configurable metric detail levels
- Granular control over output
- Advanced users and specific use cases
